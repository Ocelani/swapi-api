// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanetServiceClient is the client API for PlanetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanetServiceClient interface {
	GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*Planet, error)
}

type planetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanetServiceClient(cc grpc.ClientConnInterface) PlanetServiceClient {
	return &planetServiceClient{cc}
}

func (c *planetServiceClient) GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*Planet, error) {
	out := new(Planet)
	err := c.cc.Invoke(ctx, "/planet.PlanetService/getPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanetServiceServer is the server API for PlanetService service.
// All implementations must embed UnimplementedPlanetServiceServer
// for forward compatibility
type PlanetServiceServer interface {
	GetPlanet(context.Context, *GetPlanetRequest) (*Planet, error)
	mustEmbedUnimplementedPlanetServiceServer()
}

// UnimplementedPlanetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanetServiceServer struct {
}

func (UnimplementedPlanetServiceServer) GetPlanet(context.Context, *GetPlanetRequest) (*Planet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanet not implemented")
}
func (UnimplementedPlanetServiceServer) mustEmbedUnimplementedPlanetServiceServer() {}

// UnsafePlanetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanetServiceServer will
// result in compilation errors.
type UnsafePlanetServiceServer interface {
	mustEmbedUnimplementedPlanetServiceServer()
}

func RegisterPlanetServiceServer(s grpc.ServiceRegistrar, srv PlanetServiceServer) {
	s.RegisterService(&PlanetService_ServiceDesc, srv)
}

func _PlanetService_GetPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanetServiceServer).GetPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/planet.PlanetService/getPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanetServiceServer).GetPlanet(ctx, req.(*GetPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanetService_ServiceDesc is the grpc.ServiceDesc for PlanetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "planet.PlanetService",
	HandlerType: (*PlanetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPlanet",
			Handler:    _PlanetService_GetPlanet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/planet.proto",
}
